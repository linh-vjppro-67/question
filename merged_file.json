[
    {
        "id": "1",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the correct syntax to create a functional component in React?",
        "options": [
            {
                "description": "function MyComponent() {}",
                "isAnswerKey": true
            },
            {
                "description": "component MyComponent() {}",
                "isAnswerKey": false
            },
            {
                "description": "createComponent MyComponent() {}",
                "isAnswerKey": false
            },
            {
                "description": "React.Component MyComponent() {}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "2",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is true about JSX?",
        "options": [
            {
                "description": "JSX is a syntax extension for JavaScript.",
                "isAnswerKey": true
            },
            {
                "description": "JSX is a framework for building user interfaces.",
                "isAnswerKey": false
            },
            {
                "description": "JSX is a replacement for JavaScript.",
                "isAnswerKey": false
            },
            {
                "description": "JSX is used only for styling components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "3",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the purpose of the 'key' prop in React?",
        "options": [
            {
                "description": "To uniquely identify elements in a list.",
                "isAnswerKey": true
            },
            {
                "description": "To style elements differently.",
                "isAnswerKey": false
            },
            {
                "description": "To bind events to elements.",
                "isAnswerKey": false
            },
            {
                "description": "To pass data between components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "4",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which method is used to update state in a React class component?",
        "options": [
            {
                "description": "this.setState()",
                "isAnswerKey": true
            },
            {
                "description": "this.updateState()",
                "isAnswerKey": false
            },
            {
                "description": "this.changeState()",
                "isAnswerKey": false
            },
            {
                "description": "this.state()",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "5",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the virtual DOM in React?",
        "options": [
            {
                "description": "A lightweight copy of the actual DOM.",
                "isAnswerKey": true
            },
            {
                "description": "A database used by React to store data.",
                "isAnswerKey": false
            },
            {
                "description": "A server-side rendering tool.",
                "isAnswerKey": false
            },
            {
                "description": "A browser API used by React.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "6",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which hook is used to manage state in a functional component?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": true
            },
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "7",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does React.Fragment do?",
        "options": [
            {
                "description": "Allows grouping multiple elements without adding extra nodes to the DOM.",
                "isAnswerKey": true
            },
            {
                "description": "Creates a new component.",
                "isAnswerKey": false
            },
            {
                "description": "Manages component state.",
                "isAnswerKey": false
            },
            {
                "description": "Provides styling capabilities.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "8",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "What does the 'useEffect' hook do in React?",
        "options": [
            {
                "description": "Performs side effects in a function component.",
                "isAnswerKey": true
            },
            {
                "description": "Manages component state.",
                "isAnswerKey": false
            },
            {
                "description": "Creates a new context.",
                "isAnswerKey": false
            },
            {
                "description": "Adds event listeners to the component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "9",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which lifecycle method is used to fetch data after a component mounts?",
        "options": [
            {
                "description": "componentDidMount",
                "isAnswerKey": true
            },
            {
                "description": "componentWillMount",
                "isAnswerKey": false
            },
            {
                "description": "componentWillUpdate",
                "isAnswerKey": false
            },
            {
                "description": "componentDidUpdate",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "10",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which syntax is used to render a React component?",
        "options": [
            {
                "description": "<Component />",
                "isAnswerKey": true
            },
            {
                "description": "{Component}",
                "isAnswerKey": false
            },
            {
                "description": "[Component]",
                "isAnswerKey": false
            },
            {
                "description": "(Component)",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "11",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following code snippet. What will be the output?\n\n```jsx\nfunction MyComponent() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(10);\n  }, []);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "10",
                "isAnswerKey": true
            },
            {
                "description": "0",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            },
            {
                "description": "null",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "12",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the purpose of using 'return null' in a React component?",
        "options": [
            {
                "description": "To render nothing and prevent any HTML output.",
                "isAnswerKey": true
            },
            {
                "description": "To clear out the component's state.",
                "isAnswerKey": false
            },
            {
                "description": "To reset the component.",
                "isAnswerKey": false
            },
            {
                "description": "To trigger a component rerender.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "13",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following code, what will be logged when the button is clicked?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  const handleClick = () => {\n    setCount(count + 1);\n    console.log(count);\n  };\n  return <button onClick={handleClick}>Click me</button>;\n}\n```\n",
        "options": [
            {
                "description": "0",
                "isAnswerKey": true
            },
            {
                "description": "1",
                "isAnswerKey": false
            },
            {
                "description": "2",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "14",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the correct way to pass props to a component in React?",
        "options": [
            {
                "description": "<MyComponent propName='value' />",
                "isAnswerKey": true
            },
            {
                "description": "<MyComponent propName>value</MyComponent>",
                "isAnswerKey": false
            },
            {
                "description": "<MyComponent propName={value} />",
                "isAnswerKey": false
            },
            {
                "description": "<MyComponent:value />",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "15",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What will be the output of the component below?\n\n```jsx\nfunction Example() {\n  const [text, setText] = useState('Hello');\n  return <div>{text}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Hello",
                "isAnswerKey": true
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            },
            {
                "description": "null",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "16",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which React hook can be used to perform an action when the component is first rendered?",
        "options": [
            {
                "description": "useEffect(() => {}, [])",
                "isAnswerKey": true
            },
            {
                "description": "useLayoutEffect(() => {}, [])",
                "isAnswerKey": false
            },
            {
                "description": "useState(() => {}, [])",
                "isAnswerKey": false
            },
            {
                "description": "useReducer(() => {}, [])",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "17",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What does the following component return?\n\n```jsx\nfunction Display() {\n  return (\n    <>\n      <h1>Title</h1>\n      <p>Paragraph</p>\n    </>\n  );\n}\n```\n",
        "options": [
            {
                "description": "A fragment containing an h1 and a p element.",
                "isAnswerKey": true
            },
            {
                "description": "An error because fragments cannot contain multiple elements.",
                "isAnswerKey": false
            },
            {
                "description": "Only the h1 element.",
                "isAnswerKey": false
            },
            {
                "description": "An empty div.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "18",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the correct way to conditionally render a component in React?",
        "options": [
            {
                "description": "{show && <Component />}",
                "isAnswerKey": true
            },
            {
                "description": "{show ? <Component />}",
                "isAnswerKey": false
            },
            {
                "description": "{show | <Component />}",
                "isAnswerKey": false
            },
            {
                "description": "{show || <Component />}",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "19",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following statements about state in React is true?",
        "options": [
            {
                "description": "State is used to store data that can change over time.",
                "isAnswerKey": true
            },
            {
                "description": "State is used to pass data between components.",
                "isAnswerKey": false
            },
            {
                "description": "State is immutable and cannot be changed.",
                "isAnswerKey": false
            },
            {
                "description": "State is only available in class components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "20",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the output of the following component?\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  setCount(5);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "5",
                "isAnswerKey": true
            },
            {
                "description": "0",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "21",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "How do you create a context in React?",
        "options": [
            {
                "description": "React.createContext()",
                "isAnswerKey": true
            },
            {
                "description": "React.Context()",
                "isAnswerKey": false
            },
            {
                "description": "createReactContext()",
                "isAnswerKey": false
            },
            {
                "description": "React.useContext()",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "22",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the purpose of the 'useReducer' hook in React?",
        "options": [
            {
                "description": "To manage state using reducers.",
                "isAnswerKey": true
            },
            {
                "description": "To replace useState for simple state management.",
                "isAnswerKey": false
            },
            {
                "description": "To perform side effects.",
                "isAnswerKey": false
            },
            {
                "description": "To manage lifecycle events.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "23",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following code snippet. How do you access the context value?\n\n```jsx\nconst MyContext = React.createContext('default');\nfunction Component() {\n  // Access context value here\n}\n```\n",
        "options": [
            {
                "description": "const value = useContext(MyContext);",
                "isAnswerKey": true
            },
            {
                "description": "const value = React.useContext();",
                "isAnswerKey": false
            },
            {
                "description": "const value = MyContext.useContext();",
                "isAnswerKey": false
            },
            {
                "description": "const value = MyContext();",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "24",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the correct way to update a React state with an array of items?",
        "options": [
            {
                "description": "setItems([...items, newItem])",
                "isAnswerKey": true
            },
            {
                "description": "setItems([newItem])",
                "isAnswerKey": false
            },
            {
                "description": "setItems(items.push(newItem))",
                "isAnswerKey": false
            },
            {
                "description": "setItems({newItem})",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "25",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What will be the result of calling 'setState' in a React component?",
        "options": [
            {
                "description": "A re-render of the component.",
                "isAnswerKey": true
            },
            {
                "description": "Removal of the component from the DOM.",
                "isAnswerKey": false
            },
            {
                "description": "An error if the state is unchanged.",
                "isAnswerKey": false
            },
            {
                "description": "A warning in the console.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "26",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you optimize a React component to prevent unnecessary renders?",
        "options": [
            {
                "description": "Use React.memo()",
                "isAnswerKey": true
            },
            {
                "description": "Use React.render()",
                "isAnswerKey": false
            },
            {
                "description": "Use React.optimize()",
                "isAnswerKey": false
            },
            {
                "description": "Use React.lazy()",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "27",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "How do you handle form input changes in a React component?",
        "options": [
            {
                "description": "Using onChange event handler",
                "isAnswerKey": true
            },
            {
                "description": "Using onInputChange event handler",
                "isAnswerKey": false
            },
            {
                "description": "Using onSubmit event handler",
                "isAnswerKey": false
            },
            {
                "description": "Using onClick event handler",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "28",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the purpose of a 'ref' in React?",
        "options": [
            {
                "description": "To access DOM nodes directly.",
                "isAnswerKey": true
            },
            {
                "description": "To pass data between components.",
                "isAnswerKey": false
            },
            {
                "description": "To manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "To trigger component lifecycle events.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "29",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "How do you perform a cleanup operation in a React component?",
        "options": [
            {
                "description": "Return a function in useEffect",
                "isAnswerKey": true
            },
            {
                "description": "Use componentDidUnmount",
                "isAnswerKey": false
            },
            {
                "description": "Use useCleanup hook",
                "isAnswerKey": false
            },
            {
                "description": "Call cleanup() in useState",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "30",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the purpose of 'React.StrictMode'?",
        "options": [
            {
                "description": "To highlight potential problems in an application.",
                "isAnswerKey": true
            },
            {
                "description": "To prevent component rendering.",
                "isAnswerKey": false
            },
            {
                "description": "To enable experimental features.",
                "isAnswerKey": false
            },
            {
                "description": "To ensure components are updated synchronously.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "31",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "Identify the error in the following code snippet:\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState();\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "useState requires an initial value.",
                "isAnswerKey": true
            },
            {
                "description": "useState is not a valid hook.",
                "isAnswerKey": false
            },
            {
                "description": "setCount is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "React components cannot return JSX.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "32",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is wrong with this code snippet?\n\n```jsx\nfunction MyComponent() {\n  useEffect(() => {\n    console.log('Mounted');\n  }, [count]);\n  const [count, setCount] = useState(0);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "useEffect dependency array should not reference 'count' before initialization.",
                "isAnswerKey": true
            },
            {
                "description": "useEffect cannot be used in a functional component.",
                "isAnswerKey": false
            },
            {
                "description": "useState should be called before useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "The return statement is incorrect.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "33",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [value, setValue] = useState('Hello');\n  setValue('World');\n  return <div>{value}</div>;\n}\n```\n",
        "options": [
            {
                "description": "World",
                "isAnswerKey": true
            },
            {
                "description": "Hello",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "34",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you fix the error in this component?\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 1);\n  }, []);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Remove the setCount call from useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Add count to the dependency array in useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "Move useEffect outside the component.",
                "isAnswerKey": false
            },
            {
                "description": "Use a class component instead.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "35",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the issue with the following component?\n\n```jsx\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n  setInterval(() => {\n    setSeconds(seconds + 1);\n  }, 1000);\n  return <div>{seconds}</div>;\n}\n```\n",
        "options": [
            {
                "description": "setInterval creates a new interval on every render.",
                "isAnswerKey": true
            },
            {
                "description": "useState cannot be used with numbers.",
                "isAnswerKey": false
            },
            {
                "description": "setSeconds is not a function.",
                "isAnswerKey": false
            },
            {
                "description": "React cannot update numbers.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "36",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the error in the following code snippet?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `Count: ${count}`;\n  });\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Missing dependency array in useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "useEffect cannot modify document.title.",
                "isAnswerKey": false
            },
            {
                "description": "setCount is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "The return statement is incorrect.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "37",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 2);\n  }, [count]);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Infinite loop",
                "isAnswerKey": true
            },
            {
                "description": "2",
                "isAnswerKey": false
            },
            {
                "description": "0",
                "isAnswerKey": false
            },
            {
                "description": "4",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "38",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the problem with the following component?\n\n```jsx\nfunction App() {\n  const [name, setName] = useState('React');\n  useEffect(() => {\n    if (name === 'React') {\n      setName('ReactJS');\n    }\n  }, []);\n  return <div>{name}</div>;\n}\n```\n",
        "options": [
            {
                "description": "useEffect will not run again after the initial render.",
                "isAnswerKey": true
            },
            {
                "description": "setName is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "The condition in useEffect is incorrect.",
                "isAnswerKey": false
            },
            {
                "description": "useState cannot be used with strings.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "39",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you fix the error in this component?\n\n```jsx\nfunction App() {\n  const [data, setData] = useState(null);\n  fetch('/api/data')\n    .then(response => response.json())\n    .then(data => setData(data));\n  return <div>{data}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Move fetch call inside useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Add a dependency array to useState.",
                "isAnswerKey": false
            },
            {
                "description": "Use async/await instead of promises.",
                "isAnswerKey": false
            },
            {
                "description": "Replace fetch with axios.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "40",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is wrong with this code snippet?\n\n```jsx\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    setIsLoaded(true);\n  }, []);\n  useEffect(() => {\n    setIsLoaded(false);\n  }, [isLoaded]);\n  return <div>{isLoaded ? 'Loaded' : 'Loading'}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Infinite loop due to second useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Incorrect use of useState and useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "setIsLoaded is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "useEffect cannot update state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "41",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following code snippet:\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 1);\n  }, [count]);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Infinite loop",
                "isAnswerKey": true
            },
            {
                "description": "1",
                "isAnswerKey": false
            },
            {
                "description": "2",
                "isAnswerKey": false
            },
            {
                "description": "0",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "42",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be rendered by the following component?\n\n```jsx\nfunction App() {\n  const [state, setState] = useState('initial');\n  useEffect(() => {\n    setState('updated');\n  }, []);\n  return <div>{state}</div>;\n}\n```\n",
        "options": [
            {
                "description": "updated",
                "isAnswerKey": true
            },
            {
                "description": "initial",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "43",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Given the component below, what will be the content of the div?\n\n```jsx\nfunction Example() {\n  const [message, setMessage] = useState('Hello');\n  setMessage('World');\n  return <div>{message}</div>;\n}\n```\n",
        "options": [
            {
                "description": "World",
                "isAnswerKey": true
            },
            {
                "description": "Hello",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "44",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will the following code output?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(5);\n  });\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "5",
                "isAnswerKey": true
            },
            {
                "description": "0",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "45",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following code:\n\n```jsx\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n  setInterval(() => {\n    setSeconds(seconds + 1);\n  }, 1000);\n  return <div>{seconds}</div>;\n}\n```\n",
        "options": [
            {
                "description": "0",
                "isAnswerKey": true
            },
            {
                "description": "1",
                "isAnswerKey": false
            },
            {
                "description": "2",
                "isAnswerKey": false
            },
            {
                "description": "Infinite loop",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "46",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 1);\n  }, []);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "1",
                "isAnswerKey": true
            },
            {
                "description": "0",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "2",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "47",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be displayed by the following component?\n\n```jsx\nfunction Display() {\n  const [text, setText] = useState('Start');\n  useEffect(() => {\n    setText('End');\n  });\n  return <div>{text}</div>;\n}\n```\n",
        "options": [
            {
                "description": "End",
                "isAnswerKey": true
            },
            {
                "description": "Start",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "48",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the result of the following code execution?\n\n```jsx\nfunction Example() {\n  const [value, setValue] = useState('Initial');\n  setValue('Final');\n  return <div>{value}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Final",
                "isAnswerKey": true
            },
            {
                "description": "Initial",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "49",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the output when the component mounts?\n\n```jsx\nfunction App() {\n  const [message, setMessage] = useState('Welcome');\n  setMessage('Goodbye');\n  return <div>{message}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Goodbye",
                "isAnswerKey": true
            },
            {
                "description": "Welcome",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "50",
        "skill": "react",
        "category": "framework",
        "seniority": "fresher",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following component:\n\n```jsx\nfunction App() {\n  const [status, setStatus] = useState('Active');\n  useEffect(() => {\n    setStatus('Inactive');\n  }, []);\n  return <div>{status}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Inactive",
                "isAnswerKey": true
            },
            {
                "description": "Active",
                "isAnswerKey": false
            },
            {
                "description": "Error",
                "isAnswerKey": false
            },
            {
                "description": "undefined",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "51",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is the correct way to import React in a JavaScript file?",
        "options": [
            {
                "description": "import React from 'react';",
                "isAnswerKey": true
            },
            {
                "description": "include React from 'react';",
                "isAnswerKey": false
            },
            {
                "description": "require('React')",
                "isAnswerKey": false
            },
            {
                "description": "import 'react';",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "52",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the correct way to define a functional component in React?",
        "options": [
            {
                "description": "function MyComponent() { return <div>Hello</div>; }",
                "isAnswerKey": true
            },
            {
                "description": "const MyComponent = () => <div>Hello</div>;",
                "isAnswerKey": false
            },
            {
                "description": "class MyComponent extends React.Component { render() { return <div>Hello</div>; } }",
                "isAnswerKey": false
            },
            {
                "description": "MyComponent() => { return <div>Hello</div>; }",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "53",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In React, what is the use of the 'key' prop?",
        "options": [
            {
                "description": "To uniquely identify elements in a list",
                "isAnswerKey": true
            },
            {
                "description": "To define the component's state",
                "isAnswerKey": false
            },
            {
                "description": "To pass data between components",
                "isAnswerKey": false
            },
            {
                "description": "To render a component conditionally",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "54",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which method in a class component is used to update the component's state?",
        "options": [
            {
                "description": "setState",
                "isAnswerKey": true
            },
            {
                "description": "updateState",
                "isAnswerKey": false
            },
            {
                "description": "changeState",
                "isAnswerKey": false
            },
            {
                "description": "modifyState",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "55",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which hook would you use to manage side effects in a functional component?",
        "options": [
            {
                "description": "useEffect",
                "isAnswerKey": true
            },
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "56",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is NOT a lifecycle method in React class components?",
        "options": [
            {
                "description": "componentDidMount",
                "isAnswerKey": false
            },
            {
                "description": "componentWillUnmount",
                "isAnswerKey": false
            },
            {
                "description": "componentDidUpdate",
                "isAnswerKey": false
            },
            {
                "description": "componentWillRender",
                "isAnswerKey": true
            }
        ]
    },
    {
        "id": "57",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the purpose of the 'render' method in a React class component?",
        "options": [
            {
                "description": "To return the JSX that makes up the component UI",
                "isAnswerKey": true
            },
            {
                "description": "To initialize the component state",
                "isAnswerKey": false
            },
            {
                "description": "To update the component's props",
                "isAnswerKey": false
            },
            {
                "description": "To bind event handlers",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "58",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is an example of a controlled component in React?",
        "options": [
            {
                "description": "A form input where the value is managed by React state",
                "isAnswerKey": true
            },
            {
                "description": "A component with a fixed value",
                "isAnswerKey": false
            },
            {
                "description": "A component that only uses props",
                "isAnswerKey": false
            },
            {
                "description": "An input element without a value attribute",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "59",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which hook is used to access the context value in a functional component?",
        "options": [
            {
                "description": "useContext",
                "isAnswerKey": true
            },
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "60",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In React, what does JSX stand for?",
        "options": [
            {
                "description": "JavaScript XML",
                "isAnswerKey": true
            },
            {
                "description": "JavaScript Extension",
                "isAnswerKey": false
            },
            {
                "description": "JavaScript Syntax",
                "isAnswerKey": false
            },
            {
                "description": "JavaScript Express",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "61",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following code snippet, what will be the output?\n\n```jsx\nfunction App() {\n  const [count, setCount] = React.useState(0);\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      Count: {count}\n    </button>\n  );\n}\n```\n\nWhat happens when the button is clicked?",
        "options": [
            {
                "description": "The count is incremented by 1 each time the button is clicked.",
                "isAnswerKey": true
            },
            {
                "description": "The count is reset to 0 each time the button is clicked.",
                "isAnswerKey": false
            },
            {
                "description": "The count does not change when the button is clicked.",
                "isAnswerKey": false
            },
            {
                "description": "An error occurs because setCount is not defined.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "62",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What does the following code snippet illustrate in React?\n\n```jsx\nconst MyComponent = React.memo(function MyComponent(props) {\n  return <div>{props.name}</div>;\n});\n```\n",
        "options": [
            {
                "description": "It prevents unnecessary re-renders by memoizing the component.",
                "isAnswerKey": true
            },
            {
                "description": "It defines a lazy-loaded component.",
                "isAnswerKey": false
            },
            {
                "description": "It triggers an error because 'React.memo' is not a valid React API.",
                "isAnswerKey": false
            },
            {
                "description": "It creates a context-bound component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "63",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "In the following code snippet, identify the error:\n\n```jsx\nfunction App() {\n  const [name, setName] = useState('');\n  return (\n    <input value={name} onchange={(e) => setName(e.target.value)} />\n  );\n}\n```\n",
        "options": [
            {
                "description": "The 'onchange' attribute should be 'onChange'.",
                "isAnswerKey": true
            },
            {
                "description": "The 'setName' function should not be called in the input.",
                "isAnswerKey": false
            },
            {
                "description": "The 'useState' hook is used incorrectly.",
                "isAnswerKey": false
            },
            {
                "description": "The 'value' attribute should be removed from the input.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "64",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which React hook can be used to manage a boolean state toggle?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": true
            },
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "65",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the purpose of using 'useEffect' with an empty dependency array in React?",
        "options": [
            {
                "description": "To execute the effect only once after the initial render.",
                "isAnswerKey": true
            },
            {
                "description": "To execute the effect after every render.",
                "isAnswerKey": false
            },
            {
                "description": "To execute the effect whenever the component is unmounted.",
                "isAnswerKey": false
            },
            {
                "description": "To prevent the effect from executing at all.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "66",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following code snippet, what is the purpose of 'useCallback'?\n\n```jsx\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b]\n);\n```\n",
        "options": [
            {
                "description": "To memoize the callback function to avoid unnecessary re-creations.",
                "isAnswerKey": true
            },
            {
                "description": "To run the callback function after every render.",
                "isAnswerKey": false
            },
            {
                "description": "To bind the callback function to the component's context.",
                "isAnswerKey": false
            },
            {
                "description": "To optimize the callback function for asynchronous execution.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "67",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following describes the purpose of 'useRef' in React?",
        "options": [
            {
                "description": "To access a DOM element directly.",
                "isAnswerKey": true
            },
            {
                "description": "To manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "To trigger side effects in components.",
                "isAnswerKey": false
            },
            {
                "description": "To pass data between parent and child components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "68",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Identify the error in the following code snippet:\n\n```jsx\nfunction MyComponent() {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetchData().then(response => setData(response));\n  }, [data]);\n  return <div>{data}</div>;\n}\n```\n",
        "options": [
            {
                "description": "The 'data' dependency causes an infinite loop of fetch calls.",
                "isAnswerKey": true
            },
            {
                "description": "The 'fetchData' function should be called with 'data' as a parameter.",
                "isAnswerKey": false
            },
            {
                "description": "The 'useEffect' hook is missing its dependency array.",
                "isAnswerKey": false
            },
            {
                "description": "The 'setData' function is used incorrectly.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "69",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(count + 1);\n  }, []);\n  return <div>{count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "The count will be 1 after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The count will continuously increment indefinitely.",
                "isAnswerKey": false
            },
            {
                "description": "The count will be 0 initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setCount'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "70",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following describes the 'useReducer' hook?",
        "options": [
            {
                "description": "A hook used to manage complex state logic.",
                "isAnswerKey": true
            },
            {
                "description": "A hook used to perform DOM operations.",
                "isAnswerKey": false
            },
            {
                "description": "A hook used for handling side effects.",
                "isAnswerKey": false
            },
            {
                "description": "A hook used to access context values.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "71",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which of the following code snippets demonstrates the correct way to handle form submissions in a controlled component?",
        "options": [
            {
                "description": "```jsx\nfunction MyForm() {\n  const [input, setInput] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(input);\n  };\n  return <form onSubmit={handleSubmit}><input value={input} onChange={(e) => setInput(e.target.value)} /></form>;\n}\n```",
                "isAnswerKey": true
            },
            {
                "description": "```jsx\nfunction MyForm() {\n  const [input, setInput] = useState('');\n  const handleSubmit = () => {\n    console.log(input);\n  };\n  return <form onSubmit={handleSubmit}><input value={input} onChange={(e) => setInput(e.target.value)} /></form>;\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nfunction MyForm() {\n  const [input, setInput] = useState('');\n  const handleSubmit = (e) => {\n    console.log(input);\n  };\n  return <form onSubmit={handleSubmit}><input value={input} onChange={(e) => setInput(e.target.value)} /></form>;\n}\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nfunction MyForm() {\n  const [input, setInput] = useState('');\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n  return <form onSubmit={handleSubmit}><input value={input} /></form>;\n}\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "72",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "How would you refactor the following code to optimize performance?\n\n```jsx\nconst MyComponent = ({ items }) => {\n  return items.map(item => <div key={item.id}>{item.name}</div>);\n};\n```\n",
        "options": [
            {
                "description": "Wrap the component with React.memo to prevent unnecessary re-renders.",
                "isAnswerKey": true
            },
            {
                "description": "Use 'componentDidUpdate' to manually check for changes in 'items'.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the 'key' prop from the mapped elements.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component to a class component to use lifecycle methods.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "73",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "You want to fetch data using Axios when a component mounts. Where should you place the fetch call?",
        "options": [
            {
                "description": "Inside a useEffect hook with an empty dependency array.",
                "isAnswerKey": true
            },
            {
                "description": "Directly in the component body outside of any hook.",
                "isAnswerKey": false
            },
            {
                "description": "Inside a useEffect hook with the data state as a dependency.",
                "isAnswerKey": false
            },
            {
                "description": "Inside a useState hook.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "74",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which code snippet correctly demonstrates the use of 'useReducer' for managing state in React?",
        "options": [
            {
                "description": "```jsx\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\nconst [state, dispatch] = useReducer(reducer, initialState);\n```",
                "isAnswerKey": true
            },
            {
                "description": "```jsx\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  if (action.type === 'increment') {\n    return { count: state.count + 1 };\n  }\n  return state;\n}\nconst [state, setState] = useReducer(reducer, initialState);\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\nconst [state, dispatch] = useReducer(initialState);\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nconst initialState = { count: 0 };\nfunction reducer(state, action) {\n  switch(action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n}\nconst [state, dispatch] = useReducer(reducer);\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "75",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which of the following is a correct way to use 'useRef' to access a DOM element?",
        "options": [
            {
                "description": "```jsx\nconst MyComponent = () => {\n  const inputRef = useRef();\n  return <input ref={inputRef} />;\n};\n```",
                "isAnswerKey": true
            },
            {
                "description": "```jsx\nconst MyComponent = () => {\n  const inputRef = useRef();\n  return <input reference={inputRef} />;\n};\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nconst MyComponent = () => {\n  const inputRef = useRef();\n  return <input useRef={inputRef} />;\n};\n```",
                "isAnswerKey": false
            },
            {
                "description": "```jsx\nconst MyComponent = () => {\n  const inputRef = useRef();\n  return <input ref={inputRef.current} />;\n};\n```",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "76",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you ensure a component re-renders only when specific props change?",
        "options": [
            {
                "description": "Use React.memo and specify a custom comparison function.",
                "isAnswerKey": true
            },
            {
                "description": "Use useEffect with the prop values as dependencies.",
                "isAnswerKey": false
            },
            {
                "description": "Use a class component with shouldComponentUpdate method.",
                "isAnswerKey": false
            },
            {
                "description": "Use useRef to store the previous prop values.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "77",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which method allows you to avoid unnecessary re-renders in class components?",
        "options": [
            {
                "description": "shouldComponentUpdate",
                "isAnswerKey": true
            },
            {
                "description": "componentWillMount",
                "isAnswerKey": false
            },
            {
                "description": "componentDidMount",
                "isAnswerKey": false
            },
            {
                "description": "componentWillUnmount",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "78",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the primary purpose of 'useMemo' in React?",
        "options": [
            {
                "description": "To memoize values to prevent unnecessary calculations.",
                "isAnswerKey": true
            },
            {
                "description": "To memoize functions to avoid re-creations.",
                "isAnswerKey": false
            },
            {
                "description": "To optimize asynchronous operations.",
                "isAnswerKey": false
            },
            {
                "description": "To store state persistently between renders.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "79",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which of the following best describes the concept of 'lifting state up' in React?",
        "options": [
            {
                "description": "Moving state to the nearest common ancestor of components that need it.",
                "isAnswerKey": true
            },
            {
                "description": "Sharing state between components using context.",
                "isAnswerKey": false
            },
            {
                "description": "Using Redux to manage global state.",
                "isAnswerKey": false
            },
            {
                "description": "Using hooks like useState in child components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "80",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 3,
        "type": "multiple_choice",
        "question": "How would you implement conditional rendering in React?",
        "options": [
            {
                "description": "Using JavaScript logical operators within JSX.",
                "isAnswerKey": true
            },
            {
                "description": "Using CSS to hide components conditionally.",
                "isAnswerKey": false
            },
            {
                "description": "Using HTML conditionals within JSX.",
                "isAnswerKey": false
            },
            {
                "description": "Using the 'render' method of class components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "81",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the problem with the following code snippet?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(count + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n}\n```",
        "options": [
            {
                "description": "The 'count' variable won't update correctly inside the setInterval callback.",
                "isAnswerKey": true
            },
            {
                "description": "The code will cause a memory leak due to missing cleanup.",
                "isAnswerKey": false
            },
            {
                "description": "The interval will not start until after the component mounts.",
                "isAnswerKey": false
            },
            {
                "description": "The interval is set to 1000 milliseconds which is too long.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "82",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor the following component to avoid re-fetching data unnecessarily?\n\n```jsx\nfunction DataFetcher({ url }) {\n  const [data, setData] = useState(null);\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(json => setData(json));\n  }, [url]);\n}\n```",
        "options": [
            {
                "description": "Use useMemo to memoize the fetch call.",
                "isAnswerKey": false
            },
            {
                "description": "Add a condition inside useEffect to check if data is null before fetching.",
                "isAnswerKey": false
            },
            {
                "description": "Ensure the fetch call is only made when the 'url' changes.",
                "isAnswerKey": true
            },
            {
                "description": "Move the fetch call to a separate function.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "83",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What might be the reason for the following code causing a memory leak?\n\n```jsx\nfunction Timer() {\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log('Tick');\n    }, 1000);\n  }, []);\n}\n```",
        "options": [
            {
                "description": "The interval is not cleared when the component unmounts.",
                "isAnswerKey": true
            },
            {
                "description": "The console.log inside the interval is causing a memory leak.",
                "isAnswerKey": false
            },
            {
                "description": "The interval timing is too short and causes performance issues.",
                "isAnswerKey": false
            },
            {
                "description": "The useEffect hook is missing a dependency array.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "84",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Which approach would you use to prevent a component from re-rendering unnecessarily when its parent re-renders?",
        "options": [
            {
                "description": "Wrap the component with React.memo.",
                "isAnswerKey": true
            },
            {
                "description": "Use useEffect with an empty dependency array.",
                "isAnswerKey": false
            },
            {
                "description": "Implement shouldComponentUpdate in the component.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the component from the parent.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "85",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "You have a form component with multiple inputs. How can you refactor this component to make it more manageable?",
        "options": [
            {
                "description": "Use a single state object to manage all input values.",
                "isAnswerKey": true
            },
            {
                "description": "Use a separate state for each input.",
                "isAnswerKey": false
            },
            {
                "description": "Use a class component instead of a functional component.",
                "isAnswerKey": false
            },
            {
                "description": "Use multiple useEffect hooks for each input change.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "86",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the issue with the following code snippet?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  return <button onClick={increment}>Increment</button>;\n}\n```",
        "options": [
            {
                "description": "The 'increment' function will always add 1 to the initial 'count' value.",
                "isAnswerKey": false
            },
            {
                "description": "The 'increment' function should be wrapped in useCallback to prevent re-creation.",
                "isAnswerKey": true
            },
            {
                "description": "The button does not display the count value.",
                "isAnswerKey": false
            },
            {
                "description": "There is a missing dependency array in the component body.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "87",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "Which technique would you use to optimize a component that frequently updates state and causes performance issues?",
        "options": [
            {
                "description": "Debounce the state updates.",
                "isAnswerKey": true
            },
            {
                "description": "Use a separate useEffect for each state update.",
                "isAnswerKey": false
            },
            {
                "description": "Move state updates to the parent component.",
                "isAnswerKey": false
            },
            {
                "description": "Switch to a class component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "88",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How would you refactor a component to ensure it cleans up side effects when unmounted?",
        "options": [
            {
                "description": "Return a cleanup function from useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Use useCallback to manage side effects.",
                "isAnswerKey": false
            },
            {
                "description": "Use useMemo to memoize the side effects.",
                "isAnswerKey": false
            },
            {
                "description": "Define a cleanup method in the component body.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "89",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What would be a reason to use 'useEffect' with a dependency array that includes a prop value?",
        "options": [
            {
                "description": "To ensure the effect runs whenever the prop value changes.",
                "isAnswerKey": true
            },
            {
                "description": "To prevent the effect from running at all.",
                "isAnswerKey": false
            },
            {
                "description": "To optimize the component for asynchronous operations.",
                "isAnswerKey": false
            },
            {
                "description": "To store the prop value persistently between renders.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "90",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you avoid prop drilling in a deeply nested component structure?",
        "options": [
            {
                "description": "Use React Context to provide data to nested components.",
                "isAnswerKey": true
            },
            {
                "description": "Use Redux to manage global state.",
                "isAnswerKey": false
            },
            {
                "description": "Use higher-order components to pass data.",
                "isAnswerKey": false
            },
            {
                "description": "Use the DOM to store component data.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "91",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following code:\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(prevCount => prevCount + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return <div>{count}</div>;\n}\n```",
        "options": [
            {
                "description": "The count will increment by 1 every second.",
                "isAnswerKey": true
            },
            {
                "description": "The count will increment by 2 every second.",
                "isAnswerKey": false
            },
            {
                "description": "The count will remain static and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setCount'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "92",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(5);\n  }, []);\n  return <div>{count}</div>;\n}\n```",
        "options": [
            {
                "description": "The count will be 5 after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The count will continuously increment indefinitely.",
                "isAnswerKey": false
            },
            {
                "description": "The count will be 0 initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setCount'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "93",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Given the following code, what will be the output?\n\n```jsx\nfunction Timer() {\n  const [time, setTime] = useState(0);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 5000);\n    return () => clearTimeout(timer);\n  }, [time]);\n  return <div>{time}</div>;\n}\n```",
        "options": [
            {
                "description": "The time will increment by 1 every 5 seconds.",
                "isAnswerKey": true
            },
            {
                "description": "The time will increment by 5 every 1 second.",
                "isAnswerKey": false
            },
            {
                "description": "The time will remain static and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setTimeout'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "94",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the result of clicking the button in the following code?\n\n```jsx\nfunction App() {\n  const [text, setText] = useState('Hello');\n  const handleClick = () => setText('World');\n  return <button onClick={handleClick}>{text}</button>;\n}\n```",
        "options": [
            {
                "description": "The button text will change to 'World'.",
                "isAnswerKey": true
            },
            {
                "description": "The button text will remain 'Hello'.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setText'.",
                "isAnswerKey": false
            },
            {
                "description": "The button text will change to 'Hello World'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "95",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will happen when the following component is rendered?\n\n```jsx\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n  return <div>{visible ? 'Visible' : 'Hidden'}</div>;\n}\n```",
        "options": [
            {
                "description": "The text 'Visible' will be displayed.",
                "isAnswerKey": true
            },
            {
                "description": "The text 'Hidden' will be displayed.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setVisible'.",
                "isAnswerKey": false
            },
            {
                "description": "Nothing will be displayed.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "96",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "Predict the output of the following code:\n\n```jsx\nfunction App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    setCount(prevCount => prevCount + 1);\n  }, []);\n  return <div>{count}</div>;\n}\n```",
        "options": [
            {
                "description": "The count will be 1 after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The count will be 0 initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "The count will continuously increment indefinitely.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setCount'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "97",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the output of the following code?\n\n```jsx\nfunction App() {\n  const [message, setMessage] = useState('Hello');\n  useEffect(() => {\n    setMessage('Goodbye');\n  }, []);\n  return <div>{message}</div>;\n}\n```",
        "options": [
            {
                "description": "The message will be 'Goodbye' after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The message will be 'Hello' initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setMessage'.",
                "isAnswerKey": false
            },
            {
                "description": "The message will be 'Hello Goodbye'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "98",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be displayed when the following component is rendered?\n\n```jsx\nfunction App() {\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(false);\n  }, []);\n  return <div>{isLoading ? 'Loading...' : 'Loaded'}</div>;\n}\n```",
        "options": [
            {
                "description": "The text 'Loaded' will be displayed.",
                "isAnswerKey": true
            },
            {
                "description": "The text 'Loading...' will be displayed.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setLoading'.",
                "isAnswerKey": false
            },
            {
                "description": "Nothing will be displayed.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "99",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is the initial output of the following code?\n\n```jsx\nfunction App() {\n  const [status, setStatus] = useState('Inactive');\n  useEffect(() => {\n    setStatus('Active');\n  }, []);\n  return <div>{status}</div>;\n}\n```",
        "options": [
            {
                "description": "The status will be 'Active' after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The status will be 'Inactive' initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setStatus'.",
                "isAnswerKey": false
            },
            {
                "description": "The status will be 'Inactive' 'Active'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "100",
        "skill": "react",
        "category": "framework",
        "seniority": "junior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What will be the final state of the following component?\n\n```jsx\nfunction App() {\n  const [value, setValue] = useState('A');\n  useEffect(() => {\n    setValue('B');\n  }, []);\n  return <div>{value}</div>;\n}\n```",
        "options": [
            {
                "description": "The value will be 'B' after the component mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The value will be 'A' initially and never change.",
                "isAnswerKey": false
            },
            {
                "description": "An error will occur due to incorrect use of 'setValue'.",
                "isAnswerKey": false
            },
            {
                "description": "The value will be 'A' 'B'.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "101",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the primary purpose of the useEffect hook in React?",
        "options": [
            {
                "description": "To manage component state",
                "isAnswerKey": false
            },
            {
                "description": "To perform side effects in function components",
                "isAnswerKey": true
            },
            {
                "description": "To define component styles",
                "isAnswerKey": false
            },
            {
                "description": "To handle routing in a React application",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "102",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "In React, what does the 'key' prop primarily help with?",
        "options": [
            {
                "description": "Defining component styles",
                "isAnswerKey": false
            },
            {
                "description": "Identifying elements uniquely to optimize rendering",
                "isAnswerKey": true
            },
            {
                "description": "Handling form submissions",
                "isAnswerKey": false
            },
            {
                "description": "Managing component state",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "103",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the difference between a controlled and an uncontrolled component in React?",
        "options": [
            {
                "description": "Controlled components store their state internally, while uncontrolled components use props.",
                "isAnswerKey": false
            },
            {
                "description": "Controlled components are managed by React state, while uncontrolled components rely on the DOM.",
                "isAnswerKey": true
            },
            {
                "description": "Controlled components use Redux, while uncontrolled components do not.",
                "isAnswerKey": false
            },
            {
                "description": "Controlled components manage routes, while uncontrolled components manage UI elements.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "104",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "How can you pass data from a parent component to a child component in React?",
        "options": [
            {
                "description": "Using a global variable",
                "isAnswerKey": false
            },
            {
                "description": "Using props",
                "isAnswerKey": true
            },
            {
                "description": "Using context API",
                "isAnswerKey": false
            },
            {
                "description": "Using Redux",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "105",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is a lifecycle method in React class components?",
        "options": [
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "componentDidMount",
                "isAnswerKey": true
            },
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "106",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which hook is used for managing state in a React function component?",
        "options": [
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useState",
                "isAnswerKey": true
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "107",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is JSX in the context of React?",
        "options": [
            {
                "description": "A type of JavaScript",
                "isAnswerKey": false
            },
            {
                "description": "A syntax extension for JavaScript that allows you to write HTML inside JavaScript",
                "isAnswerKey": true
            },
            {
                "description": "A CSS preprocessor",
                "isAnswerKey": false
            },
            {
                "description": "A JavaScript framework",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "108",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the main purpose of the React Router library?",
        "options": [
            {
                "description": "To manage global state",
                "isAnswerKey": false
            },
            {
                "description": "To handle navigation and routing in React applications",
                "isAnswerKey": true
            },
            {
                "description": "To perform asynchronous operations",
                "isAnswerKey": false
            },
            {
                "description": "To define component styles",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "109",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which hook would you use to mimic componentDidMount in a functional component?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useEffect",
                "isAnswerKey": true
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "110",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which statement is true about React keys?",
        "options": [
            {
                "description": "Keys are used to define CSS styles for elements.",
                "isAnswerKey": false
            },
            {
                "description": "Keys help React identify which items have changed, been added, or removed.",
                "isAnswerKey": true
            },
            {
                "description": "Keys are required for every React component.",
                "isAnswerKey": false
            },
            {
                "description": "Keys are used to manage component state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "111",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following code snippet, what is the expected behavior?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      {count}\n    </button>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The button will not increment the count when clicked.",
                "isAnswerKey": false
            },
            {
                "description": "The count will increment by 1 each time the button is clicked.",
                "isAnswerKey": true
            },
            {
                "description": "The count will reset to 0 each time the button is clicked.",
                "isAnswerKey": false
            },
            {
                "description": "The count will increment by 2 each time the button is clicked.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "112",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "How can you ensure side effects in a useEffect hook only run once after the component mounts?",
        "options": [
            {
                "description": "Pass a boolean flag as the second argument to useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "Pass an empty array as the second argument to useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Use a setTimeout inside useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "Use a return statement inside useEffect.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "113",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Considering the following code snippet, which option best describes its behavior?\n\n```jsx\nimport React, { useEffect, useState } from 'react';\n\nfunction DataFetcher() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch('https://api.example.com/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, []);\n\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\n}\n```\n",
        "options": [
            {
                "description": "The component will fetch data every time it re-renders.",
                "isAnswerKey": false
            },
            {
                "description": "The component will fetch data only once when it mounts.",
                "isAnswerKey": true
            },
            {
                "description": "The component will not fetch any data.",
                "isAnswerKey": false
            },
            {
                "description": "The component will fetch data every second.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "114",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which React hook is primarily used for accessing context in a functional component?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": true
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "115",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the purpose of the useMemo hook in React?",
        "options": [
            {
                "description": "To perform side effects",
                "isAnswerKey": false
            },
            {
                "description": "To optimize performance by memoizing expensive calculations",
                "isAnswerKey": true
            },
            {
                "description": "To manage local component state",
                "isAnswerKey": false
            },
            {
                "description": "To fetch data from an API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "116",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which technique is used to prevent unnecessary re-renders in a React component?",
        "options": [
            {
                "description": "Using a global variable",
                "isAnswerKey": false
            },
            {
                "description": "Using React.memo",
                "isAnswerKey": true
            },
            {
                "description": "Using a higher-order component",
                "isAnswerKey": false
            },
            {
                "description": "Using a context API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "117",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the main advantage of using useReducer over useState in React?",
        "options": [
            {
                "description": "useReducer is faster than useState.",
                "isAnswerKey": false
            },
            {
                "description": "useReducer is better for managing complex state logic.",
                "isAnswerKey": true
            },
            {
                "description": "useReducer automatically fetches data.",
                "isAnswerKey": false
            },
            {
                "description": "useReducer simplifies CSS styling.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "118",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which of the following best describes the useRef hook?",
        "options": [
            {
                "description": "useRef is used to manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "useRef provides a way to access DOM nodes or persist values across renders without causing re-renders.",
                "isAnswerKey": true
            },
            {
                "description": "useRef is used for fetching data from APIs.",
                "isAnswerKey": false
            },
            {
                "description": "useRef is used to define routes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "119",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which option correctly describes the role of PropTypes in React?",
        "options": [
            {
                "description": "PropTypes are used for styling components.",
                "isAnswerKey": false
            },
            {
                "description": "PropTypes are used for type-checking props passed to components.",
                "isAnswerKey": true
            },
            {
                "description": "PropTypes are used for managing component state.",
                "isAnswerKey": false
            },
            {
                "description": "PropTypes are used for routing.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "120",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the purpose of the Fragment component in React?",
        "options": [
            {
                "description": "To fetch data from APIs.",
                "isAnswerKey": false
            },
            {
                "description": "To group a list of children without adding extra nodes to the DOM.",
                "isAnswerKey": true
            },
            {
                "description": "To manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "To handle routing.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "121",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following code snippet, identify the bug that might occur.\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [value, setValue] = useState(0);\n\n  const increment = () => {\n    setValue(value + 1);\n    setValue(value + 1);\n  };\n\n  return (\n    <button onClick={increment}>Increment</button>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The button will increment the value by 2 each click.",
                "isAnswerKey": false
            },
            {
                "description": "The button will increment the value by 1 each click due to batching in React state updates.",
                "isAnswerKey": true
            },
            {
                "description": "The button will cause a syntax error.",
                "isAnswerKey": false
            },
            {
                "description": "The button will not change the value at all.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "122",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you optimize the following component to prevent unnecessary re-renders?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction List({ items }) {\n  const [selected, setSelected] = useState(null);\n\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id} onClick={() => setSelected(item.id)}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Convert the component to class-based.",
                "isAnswerKey": false
            },
            {
                "description": "Use React.memo to wrap the List component.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for selected state.",
                "isAnswerKey": false
            },
            {
                "description": "Use setTimeout to debounce state updates.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "123",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which pattern can be used to manage complex state in larger React applications?",
        "options": [
            {
                "description": "Singleton pattern",
                "isAnswerKey": false
            },
            {
                "description": "Container-presentational pattern",
                "isAnswerKey": true
            },
            {
                "description": "Observer pattern",
                "isAnswerKey": false
            },
            {
                "description": "Builder pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "124",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you implement a debounced search input in React?",
        "options": [
            {
                "description": "Use a useState hook to update the input value immediately.",
                "isAnswerKey": false
            },
            {
                "description": "Use a useEffect hook with a setTimeout to delay state updates.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable to store the input value.",
                "isAnswerKey": false
            },
            {
                "description": "Use a context to manage the input state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "125",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which hook would you use to manage a complex form state in a React component?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useReducer",
                "isAnswerKey": true
            },
            {
                "description": "useEffect",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "126",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you implement a lazy-loaded component in React?",
        "options": [
            {
                "description": "Use the regular import statement for the component.",
                "isAnswerKey": false
            },
            {
                "description": "Use React.lazy and Suspense to dynamically import the component.",
                "isAnswerKey": true
            },
            {
                "description": "Use a setTimeout to delay component rendering.",
                "isAnswerKey": false
            },
            {
                "description": "Use a higher-order component for lazy loading.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "127",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the main advantage of using React Context API over prop drilling?",
        "options": [
            {
                "description": "Context API improves server-side performance.",
                "isAnswerKey": false
            },
            {
                "description": "Context API allows you to share data without passing props through every level of the component tree.",
                "isAnswerKey": true
            },
            {
                "description": "Context API automatically fetches data.",
                "isAnswerKey": false
            },
            {
                "description": "Context API simplifies CSS styling.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "128",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which method can you use to ensure a component is only rendered once after mounting in React?",
        "options": [
            {
                "description": "Using a global variable",
                "isAnswerKey": false
            },
            {
                "description": "Using useEffect with an empty dependency array",
                "isAnswerKey": true
            },
            {
                "description": "Using a higher-order component",
                "isAnswerKey": false
            },
            {
                "description": "Using a context API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "129",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the purpose of the Error Boundary in React?",
        "options": [
            {
                "description": "To fetch data from APIs.",
                "isAnswerKey": false
            },
            {
                "description": "To catch JavaScript errors anywhere in the component tree and display a fallback UI.",
                "isAnswerKey": true
            },
            {
                "description": "To manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "To handle routing.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "130",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 3,
        "type": "multiple_choice",
        "question": "Which hook can you use to create a custom hook in React?",
        "options": [
            {
                "description": "useState",
                "isAnswerKey": false
            },
            {
                "description": "useEffect",
                "isAnswerKey": true
            },
            {
                "description": "useReducer",
                "isAnswerKey": false
            },
            {
                "description": "useContext",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "131",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor the following component to improve performance and readability?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction LargeList({ items }) {\n  const [selected, setSelected] = useState(null);\n\n  const handleClick = (id) => {\n    setSelected(id);\n  };\n\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id} onClick={() => handleClick(item.id)}>\n          {item.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Use a setTimeout to debounce handleClick function.",
                "isAnswerKey": false
            },
            {
                "description": "Wrap the LargeList component with React.memo.",
                "isAnswerKey": true
            },
            {
                "description": "Convert the component to class-based.",
                "isAnswerKey": false
            },
            {
                "description": "Use a global variable for selected state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "132",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor a React component to better handle and display loading states during data fetching?",
        "options": [
            {
                "description": "Use a global variable to track loading state.",
                "isAnswerKey": false
            },
            {
                "description": "Implement a custom hook for data fetching which returns data and loading state.",
                "isAnswerKey": true
            },
            {
                "description": "Use setTimeout to simulate loading.",
                "isAnswerKey": false
            },
            {
                "description": "Use a class-based component with componentDidMount.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "133",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Given a component with complex conditional rendering, how can you refactor it for better readability?",
        "options": [
            {
                "description": "Use inline styles to manage conditions.",
                "isAnswerKey": false
            },
            {
                "description": "Break down complex conditions into smaller functions or components.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for conditional state.",
                "isAnswerKey": false
            },
            {
                "description": "Use a class-based component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "134",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Which design pattern is suitable for separating concerns in a React application?",
        "options": [
            {
                "description": "Builder pattern",
                "isAnswerKey": false
            },
            {
                "description": "Container-presentational pattern",
                "isAnswerKey": true
            },
            {
                "description": "Singleton pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "135",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is a common approach to refactor a component that has become too large and complex?",
        "options": [
            {
                "description": "Convert the component to class-based.",
                "isAnswerKey": false
            },
            {
                "description": "Break the component into smaller, reusable components.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "136",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor a React component to ensure it handles asynchronous operations more reliably?",
        "options": [
            {
                "description": "Use a setTimeout to manage async operations.",
                "isAnswerKey": false
            },
            {
                "description": "Implement async logic within useEffect with proper cleanup.",
                "isAnswerKey": true
            },
            {
                "description": "Use a higher-order component for async logic.",
                "isAnswerKey": false
            },
            {
                "description": "Use a global variable for async state management.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "137",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Which method is best for handling complex state updates in a React component?",
        "options": [
            {
                "description": "Using useState for all state updates.",
                "isAnswerKey": false
            },
            {
                "description": "Using useReducer for managing complex state updates.",
                "isAnswerKey": true
            },
            {
                "description": "Using a global variable for state updates.",
                "isAnswerKey": false
            },
            {
                "description": "Using setTimeout to delay state updates.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "138",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor a component to improve its testability?",
        "options": [
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Break down components into smaller, isolated units.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "139",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "Which optimization technique would you choose to reduce memory usage in a large React application?",
        "options": [
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Lazy load components and use code splitting.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "140",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor a component to ensure it is easier to maintain in the future?",
        "options": [
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Break the component into smaller, reusable functions or components.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "141",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How would you implement a reusable form component using React hooks?",
        "options": [
            {
                "description": "Use a class-based component with componentDidMount.",
                "isAnswerKey": false
            },
            {
                "description": "Create a custom hook that manages form state and validation logic.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for all form elements.",
                "isAnswerKey": false
            },
            {
                "description": "Use a global variable for form state management.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "142",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which design pattern would you use to implement a scalable state management solution in a React application?",
        "options": [
            {
                "description": "Singleton pattern",
                "isAnswerKey": false
            },
            {
                "description": "Flux pattern",
                "isAnswerKey": true
            },
            {
                "description": "Builder pattern",
                "isAnswerKey": false
            },
            {
                "description": "Factory pattern",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "143",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you implement a global error handler in a React application?",
        "options": [
            {
                "description": "Use a global variable to track errors.",
                "isAnswerKey": false
            },
            {
                "description": "Implement an Error Boundary component that catches errors in the component tree.",
                "isAnswerKey": true
            },
            {
                "description": "Use a custom hook to manage error state.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles to display error messages.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "144",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you apply the observer pattern in a React application?",
        "options": [
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Implement a context that components can subscribe to for updates.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "145",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which method would you use to ensure consistent error handling across a React application?",
        "options": [
            {
                "description": "Use a global variable to track error states.",
                "isAnswerKey": false
            },
            {
                "description": "Implement a centralized error logging service and use Error Boundaries.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for error messages.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "146",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you implement a custom hook for managing authentication state in a React application?",
        "options": [
            {
                "description": "Use a class-based component with componentDidMount.",
                "isAnswerKey": false
            },
            {
                "description": "Create a custom hook that uses React Context to manage authentication state.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for authentication state.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles for authentication elements.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "147",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you ensure a React component is scalable and maintainable?",
        "options": [
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Implement modular architecture with reusable components and custom hooks.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "148",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "Which approach would you use to implement cross-cutting concerns in a React application?",
        "options": [
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Implement higher-order components or custom hooks.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "149",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you implement a scalable solution for managing application-wide notifications in a React app?",
        "options": [
            {
                "description": "Use a global variable for notifications state.",
                "isAnswerKey": false
            },
            {
                "description": "Use React Context with custom hooks for managing notifications.",
                "isAnswerKey": true
            },
            {
                "description": "Use inline styles for notification elements.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "150",
        "skill": "react",
        "category": "framework",
        "seniority": "middle",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you apply the dependency injection pattern in a React application?",
        "options": [
            {
                "description": "Use inline styles for all elements.",
                "isAnswerKey": false
            },
            {
                "description": "Use React Context to inject dependencies into components.",
                "isAnswerKey": true
            },
            {
                "description": "Use a global variable for state management.",
                "isAnswerKey": false
            },
            {
                "description": "Convert all components to class-based.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "151",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In a React application, which of the following patterns is most appropriate for managing complex state logic across multiple components?",
        "options": [
            {
                "description": "Higher Order Components (HOC)",
                "isAnswerKey": false
            },
            {
                "description": "Redux for state management",
                "isAnswerKey": true
            },
            {
                "description": "Context API with Hooks",
                "isAnswerKey": false
            },
            {
                "description": "Component Composition",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "152",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "What is the primary advantage of using React's useMemo hook in a large scale application?",
        "options": [
            {
                "description": "It prevents memory leaks by cleaning up effects.",
                "isAnswerKey": false
            },
            {
                "description": "It improves performance by memoizing expensive calculations.",
                "isAnswerKey": true
            },
            {
                "description": "It simplifies state management logic.",
                "isAnswerKey": false
            },
            {
                "description": "It allows components to update independently.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "153",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is a key consideration when choosing between using React Context API and Redux for state management?",
        "options": [
            {
                "description": "Redux has a built-in router for navigation.",
                "isAnswerKey": false
            },
            {
                "description": "Context API is better for simple, localized state.",
                "isAnswerKey": true
            },
            {
                "description": "Redux provides better performance for all applications.",
                "isAnswerKey": false
            },
            {
                "description": "Context API supports middleware natively.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "154",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which design pattern is used in React to enhance a component by wrapping it with additional functionality?",
        "options": [
            {
                "description": "Render props",
                "isAnswerKey": false
            },
            {
                "description": "Higher Order Component (HOC)",
                "isAnswerKey": true
            },
            {
                "description": "Context API",
                "isAnswerKey": false
            },
            {
                "description": "Hooks",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "155",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "When would you choose to use React's useReducer over useState?",
        "options": [
            {
                "description": "When you need to manage a simple boolean toggle.",
                "isAnswerKey": false
            },
            {
                "description": "When the state logic is complex and involves multiple sub-values.",
                "isAnswerKey": true
            },
            {
                "description": "When you need to perform side-effects after state updates.",
                "isAnswerKey": false
            },
            {
                "description": "When you need to share state across unrelated components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "156",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In a React application, which pattern is most suitable for lazy loading components?",
        "options": [
            {
                "description": "Higher Order Components",
                "isAnswerKey": false
            },
            {
                "description": "React.lazy and Suspense",
                "isAnswerKey": true
            },
            {
                "description": "useEffect with async/await",
                "isAnswerKey": false
            },
            {
                "description": "Context API",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "157",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "How does the key prop help React in rendering lists?",
        "options": [
            {
                "description": "It forces a complete re-render of the list.",
                "isAnswerKey": false
            },
            {
                "description": "It helps React identify which items have changed, been added, or removed.",
                "isAnswerKey": true
            },
            {
                "description": "It prevents the list from being rendered if unchanged.",
                "isAnswerKey": false
            },
            {
                "description": "It automatically sorts the list items.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "158",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which one of the following is a benefit of using the React Context API?",
        "options": [
            {
                "description": "It completely replaces Redux for global state management.",
                "isAnswerKey": false
            },
            {
                "description": "It allows state to be passed deeply throughout the component tree without prop drilling.",
                "isAnswerKey": true
            },
            {
                "description": "It automatically optimizes the performance of the application.",
                "isAnswerKey": false
            },
            {
                "description": "It provides built-in support for async operations.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "159",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "In React, what is the main advantage of using the useEffect hook over componentDidMount lifecycle method?",
        "options": [
            {
                "description": "useEffect can only be executed once per component lifecycle.",
                "isAnswerKey": false
            },
            {
                "description": "useEffect allows you to perform side effects in functional components.",
                "isAnswerKey": true
            },
            {
                "description": "useEffect does not require dependency arrays.",
                "isAnswerKey": false
            },
            {
                "description": "useEffect is executed before every render.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "160",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 1,
        "type": "multiple_choice",
        "question": "Which of the following is a common use case for React Portals?",
        "options": [
            {
                "description": "To manage component state.",
                "isAnswerKey": false
            },
            {
                "description": "To render children into a DOM node outside the parent component's hierarchy.",
                "isAnswerKey": true
            },
            {
                "description": "To optimize component re-renders.",
                "isAnswerKey": false
            },
            {
                "description": "To handle form submissions.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "161",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following React component code snippet. What is the issue with the given implementation?\n\n```jsx\nfunction Example({ items }) {\n  const handleClick = (index) => {\n    console.log('Clicked item:', items[index]);\n  };\n\n  return (\n    <ul>\n      {items.map((item, index) => (\n        <li key={index} onClick={() => handleClick(index)}>{item}</li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Using the index as a key can cause issues when the list order changes.",
                "isAnswerKey": true
            },
            {
                "description": "The handleClick function should be defined inside the map function.",
                "isAnswerKey": false
            },
            {
                "description": "The onClick handler should not use arrow functions.",
                "isAnswerKey": false
            },
            {
                "description": "The items prop should be passed as a state instead.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "162",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "In the context of React, what will be the output of the following code snippet when the button is clicked?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n\n  return (\n    <button onClick={handleClick}>Count: {count}</button>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Count: 1",
                "isAnswerKey": true
            },
            {
                "description": "Count: 2",
                "isAnswerKey": false
            },
            {
                "description": "Count: 3",
                "isAnswerKey": false
            },
            {
                "description": "Count: 0",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "163",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is a potential issue with the following React component that uses the useEffect hook?\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div>Seconds: {seconds}</div>;\n}\n```\n",
        "options": [
            {
                "description": "The interval may run multiple times causing memory leaks.",
                "isAnswerKey": false
            },
            {
                "description": "The seconds state is not updated correctly due to stale closure.",
                "isAnswerKey": true
            },
            {
                "description": "The interval is cleared immediately due to an incorrect return.",
                "isAnswerKey": false
            },
            {
                "description": "The setSeconds function is not defined properly.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "164",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Given the following React component, what will be the output when the button is clicked?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [value, setValue] = useState(10);\n\n  const handleClick = () => {\n    setValue((prevValue) => prevValue + 1);\n    setValue((prevValue) => prevValue + 1);\n  };\n\n  return (\n    <button onClick={handleClick}>Value: {value}</button>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Value: 12",
                "isAnswerKey": true
            },
            {
                "description": "Value: 11",
                "isAnswerKey": false
            },
            {
                "description": "Value: 10",
                "isAnswerKey": false
            },
            {
                "description": "Value: 13",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "165",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "What is the expected behavior of the following React component and why?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Toggle() {\n  const [isOn, setIsOn] = useState(false);\n\n  return (\n    <button onClick={() => setIsOn(!isOn)}>\n      {isOn ? 'ON' : 'OFF'}\n    </button>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The button will toggle between 'ON' and 'OFF' when clicked.",
                "isAnswerKey": true
            },
            {
                "description": "The button will only display 'OFF' due to incorrect state initialization.",
                "isAnswerKey": false
            },
            {
                "description": "The button will not change due to immutability issues.",
                "isAnswerKey": false
            },
            {
                "description": "The button will throw an error due to incorrect event handling.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "166",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "In the React component below, how can you prevent the unnecessary execution of the fetch function?\n\n```jsx\nimport React, { useEffect } from 'react';\n\nfunction DataFetcher({ url }) {\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => console.log(data));\n  }, [url]);\n\n  return <div>Loading data...</div>;\n}\n```\n",
        "options": [
            {
                "description": "Remove the dependency array.",
                "isAnswerKey": false
            },
            {
                "description": "Use a ref to store the previous url value and check before fetching.",
                "isAnswerKey": true
            },
            {
                "description": "Use a state variable to control the fetch execution.",
                "isAnswerKey": false
            },
            {
                "description": "Add an empty dependency array.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "167",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "In a React application, what is a common pitfall when using the Context API directly in function components?",
        "options": [
            {
                "description": "It can lead to deeply nested JSX structures.",
                "isAnswerKey": false
            },
            {
                "description": "It can cause unnecessary re-renders if not managed properly.",
                "isAnswerKey": true
            },
            {
                "description": "It is not compatible with hooks.",
                "isAnswerKey": false
            },
            {
                "description": "It does not support asynchronous data fetching.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "168",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Consider the following React component. What is a potential issue with the use of state here?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <button onClick={increment}>Increment</button>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The count will not increment correctly due to async updates.",
                "isAnswerKey": true
            },
            {
                "description": "The increment function is not accessible within the component.",
                "isAnswerKey": false
            },
            {
                "description": "The setCount function should be called within a useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "The initial state should be passed as a function.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "169",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "Which one of the following strategies can help improve performance when rendering a large list of items in React?",
        "options": [
            {
                "description": "Using inline styles for each list item.",
                "isAnswerKey": false
            },
            {
                "description": "Using React.memo to memoize each list item.",
                "isAnswerKey": true
            },
            {
                "description": "Increasing the component's state variables.",
                "isAnswerKey": false
            },
            {
                "description": "Avoiding the use of keys in list items.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "170",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 2,
        "type": "multiple_choice",
        "question": "In a React app, which of the following is a common reason for a component to re-render unnecessarily?",
        "options": [
            {
                "description": "State updates with the same value.",
                "isAnswerKey": true
            },
            {
                "description": "Using arrow functions within the render method.",
                "isAnswerKey": false
            },
            {
                "description": "Using props for conditional rendering.",
                "isAnswerKey": false
            },
            {
                "description": "Using class components instead of functional components.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "171",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following React component, how can it be refactored to prevent unnecessary re-renders?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction ExpensiveComponent({ value }) {\n  console.log('Rendering ExpensiveComponent');\n\n  return <div>Value: {value}</div>;\n}\n\nfunction ParentComponent() {\n  const [counter, setCounter] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCounter(counter + 1)}>Increment</button>\n      <ExpensiveComponent value={counter} />\n    </div>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Wrap ExpensiveComponent with React.memo.",
                "isAnswerKey": true
            },
            {
                "description": "Move ExpensiveComponent inside the button onClick handler.",
                "isAnswerKey": false
            },
            {
                "description": "Use a shouldComponentUpdate method in ExpensiveComponent.",
                "isAnswerKey": false
            },
            {
                "description": "Convert ExpensiveComponent to a class component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "172",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you optimize the following component to handle a large list of items efficiently?\n\n```jsx\nimport React from 'react';\n\nfunction LargeList({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Implement pagination or infinite scrolling.",
                "isAnswerKey": true
            },
            {
                "description": "Convert the list items into a single string and render.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles for each list item.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the keys from the list items.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "173",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "In a React application using hooks, what is the best way to manage a form's state?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Form() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: ''\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n\n  return (\n    <form>\n      <input name=\"name\" value={formData.name} onChange={handleChange} />\n      <input name=\"email\" value={formData.email} onChange={handleChange} />\n      <input name=\"password\" type=\"password\" value={formData.password} onChange={handleChange} />\n    </form>\n  );\n}\n```\n",
        "options": [
            {
                "description": "This implementation is optimal as it uses a single state object.",
                "isAnswerKey": true
            },
            {
                "description": "Separate useState hooks should be used for each input field.",
                "isAnswerKey": false
            },
            {
                "description": "The formData state should be reset after every change.",
                "isAnswerKey": false
            },
            {
                "description": "The handleChange function should not use prevState.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "174",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is the issue with the following component when using it in a list and how can it be fixed?\n\n```jsx\nfunction ListItem({ item }) {\n  return <li>{item.name}</li>;\n}\n\nfunction ItemList({ items }) {\n  return (\n    <ul>\n      {items.map(item => (\n        <ListItem key={item.id} item={item} />\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The key should be passed to ListItem.",
                "isAnswerKey": true
            },
            {
                "description": "The ListItem component should not be used.",
                "isAnswerKey": false
            },
            {
                "description": "The items should be sorted before mapping.",
                "isAnswerKey": false
            },
            {
                "description": "ListItem should be a class component.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "175",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "What is a potential memory leak issue in the following component and how can it be resolved?\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction ChatRoom() {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    const chatSubscription = subscribeToChat(newMessages => {\n      setMessages(prevMessages => [...prevMessages, ...newMessages]);\n    });\n    return () => chatSubscription.unsubscribe();\n  }, []);\n\n  return (\n    <ul>\n      {messages.map((message, index) => (\n        <li key={index}>{message}</li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "The unsubscribe function should be inside the effect's cleanup.",
                "isAnswerKey": true
            },
            {
                "description": "The messages state should be cleared on component unmount.",
                "isAnswerKey": false
            },
            {
                "description": "The chatSubscription should be stored in a ref.",
                "isAnswerKey": false
            },
            {
                "description": "The useEffect hook should not have a dependency array.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "176",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "In the following React component, which optimization can be applied to prevent unnecessary updates to the child component?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction ChildComponent({ data }) {\n  console.log('Rendering ChildComponent');\n  return <div>{data}</div>;\n}\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <ChildComponent data={count} />\n    </div>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Use React.memo to memoize ChildComponent.",
                "isAnswerKey": true
            },
            {
                "description": "Convert ParentComponent to a class component.",
                "isAnswerKey": false
            },
            {
                "description": "Use useCallback to memoize the setCount function.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the button from ParentComponent.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "177",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Given the following React component structure, how can you lift the state up to avoid prop drilling?\n\n```jsx\nfunction GrandParent({ initialCount }) {\n  return <Parent initialCount={initialCount} />;\n}\n\nfunction Parent({ initialCount }) {\n  return <Child initialCount={initialCount} />;\n}\n\nfunction Child({ initialCount }) {\n  const [count, setCount] = useState(initialCount);\n  return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;\n}\n```\n",
        "options": [
            {
                "description": "Move the useState hook to the GrandParent component and pass both count and setCount down.",
                "isAnswerKey": true
            },
            {
                "description": "Use context to manage the initialCount state.",
                "isAnswerKey": false
            },
            {
                "description": "Keep the state in the Child component and use refs.",
                "isAnswerKey": false
            },
            {
                "description": "Convert Child to a class component with its own state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "178",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "How can you avoid the common pitfall of stale closures with useEffect in React?\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds + 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [seconds]);\n\n  return <div>Seconds: {seconds}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Include seconds in the dependency array of useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Remove the dependency array from useEffect.",
                "isAnswerKey": false
            },
            {
                "description": "Store the seconds in a global variable.",
                "isAnswerKey": false
            },
            {
                "description": "Use a ref to store the interval.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "179",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "In the following React code, what would be a better way to avoid executing the fetch function on every render?\n\n```jsx\nimport React, { useEffect } from 'react';\n\nfunction DataFetcher({ url }) {\n  useEffect(() => {\n    fetch(url)\n      .then(response => response.json())\n      .then(data => console.log(data));\n  });\n\n  return <div>Loading data...</div>;\n}\n```\n",
        "options": [
            {
                "description": "Add a dependency array with url.",
                "isAnswerKey": true
            },
            {
                "description": "Move fetch into a useCallback hook.",
                "isAnswerKey": false
            },
            {
                "description": "Use setInterval to delay execution.",
                "isAnswerKey": false
            },
            {
                "description": "Remove the asynchronous logic.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "180",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 3,
        "type": "multiple_choice",
        "question": "Consider the following React component. What is the issue and how can it be resolved?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <button onClick={increment}>Increment</button>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Use a function update to ensure both setCount calls use the latest value.",
                "isAnswerKey": true
            },
            {
                "description": "Convert the Counter component to a class component.",
                "isAnswerKey": false
            },
            {
                "description": "Remove one of the setCount calls.",
                "isAnswerKey": false
            },
            {
                "description": "Add useEffect to synchronize the count state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "181",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "In the following React code, how can you refactor the component to enhance performance and reduce unnecessary re-renders?\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction ParentComponent() {\n  const [count, setCount] = useState(0);\n\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <button onClick={handleClick}>Increment</button>\n      <ChildComponent count={count} />\n    </div>\n  );\n}\n\nfunction ChildComponent({ count }) {\n  console.log('Rendering ChildComponent');\n  return <div>Count: {count}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Wrap ChildComponent with React.memo to prevent re-renders.",
                "isAnswerKey": true
            },
            {
                "description": "Use shouldComponentUpdate in ParentComponent.",
                "isAnswerKey": false
            },
            {
                "description": "Convert ParentComponent to a class component.",
                "isAnswerKey": false
            },
            {
                "description": "Move the handleClick function inside ChildComponent.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "182",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor the following code to ensure the fetchData function is only called once when the component mounts?\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction DataComponent() {\n  const [data, setData] = useState(null);\n\n  const fetchData = () => {\n    fetch('/api/data')\n      .then(response => response.json())\n      .then(data => setData(data));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return <div>{data ? JSON.stringify(data) : 'Loading...'}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Remove fetchData from the dependency array.",
                "isAnswerKey": true
            },
            {
                "description": "Use useCallback to memoize fetchData.",
                "isAnswerKey": false
            },
            {
                "description": "Call fetchData directly inside the useEffect hook.",
                "isAnswerKey": false
            },
            {
                "description": "Pass an empty array as the dependency array.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "183",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is an effective way to refactor the following component to avoid prop drilling?\n\n```jsx\nfunction App() {\n  const [user, setUser] = useState({ name: 'John', age: 30 });\n\n  return <Profile user={user} setUser={setUser} />;\n}\n\nfunction Profile({ user, setUser }) {\n  return <UserDetails user={user} setUser={setUser} />;\n}\n\nfunction UserDetails({ user, setUser }) {\n  return <div>{user.name}</div>;\n}\n```\n",
        "options": [
            {
                "description": "Use React Context API to manage user state globally.",
                "isAnswerKey": true
            },
            {
                "description": "Convert all components to class components.",
                "isAnswerKey": false
            },
            {
                "description": "Pass user and setUser as props to all components.",
                "isAnswerKey": false
            },
            {
                "description": "Store user data in a global variable.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "184",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "In a React component, what is the best practice to avoid re-creating functions on every render?",
        "options": [
            {
                "description": "Use the useCallback hook to memoize functions.",
                "isAnswerKey": true
            },
            {
                "description": "Define all functions outside the component.",
                "isAnswerKey": false
            },
            {
                "description": "Convert the component to a class component.",
                "isAnswerKey": false
            },
            {
                "description": "Use the useMemo hook for all functions.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "185",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you refactor the following code to optimize the rendering of a large data set?\n\n```jsx\nfunction DataList({ data }) {\n  return (\n    <ul>\n      {data.map(item => (\n        <li key={item.id}>{item.name}</li>\n      ))}\n    </ul>\n  );\n}\n```\n",
        "options": [
            {
                "description": "Implement windowing using a library like react-window or react-virtualized.",
                "isAnswerKey": true
            },
            {
                "description": "Convert DataList to a class component.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline styles for list items.",
                "isAnswerKey": false
            },
            {
                "description": "Sort the data before rendering.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "186",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is the purpose of the useMemo hook in React and how is it different from useEffect?",
        "options": [
            {
                "description": "useMemo is used to memoize expensive computations, while useEffect is for side-effects.",
                "isAnswerKey": true
            },
            {
                "description": "useMemo is used for data fetching, while useEffect is for rendering logic.",
                "isAnswerKey": false
            },
            {
                "description": "useMemo automatically updates state, while useEffect does not.",
                "isAnswerKey": false
            },
            {
                "description": "useMemo and useEffect serve the same purpose but are used in different scenarios.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "187",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "How can you efficiently manage a large number of subscriptions in a React component?",
        "options": [
            {
                "description": "Use a custom hook to encapsulate subscription logic.",
                "isAnswerKey": true
            },
            {
                "description": "Store all subscriptions in the component's state.",
                "isAnswerKey": false
            },
            {
                "description": "Create a new subscription on every render.",
                "isAnswerKey": false
            },
            {
                "description": "Use componentDidMount and componentWillUnmount lifecycle methods.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "188",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is a common mistake when using React's useEffect hook with dependencies, and how can it be avoided?",
        "options": [
            {
                "description": "Not including all variables used in the effect as dependencies can cause stale data issues.",
                "isAnswerKey": true
            },
            {
                "description": "Including too many dependencies can cause infinite loops.",
                "isAnswerKey": false
            },
            {
                "description": "Using useEffect for rendering logic can cause performance issues.",
                "isAnswerKey": false
            },
            {
                "description": "Forgetting to return a cleanup function can cause memory leaks.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "189",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "In a large scale React application, how can you manage complex state logic efficiently?",
        "options": [
            {
                "description": "Use a combination of useReducer and Context API for state management.",
                "isAnswerKey": true
            },
            {
                "description": "Store all state in a single global object.",
                "isAnswerKey": false
            },
            {
                "description": "Use local state in each component and pass it down as props.",
                "isAnswerKey": false
            },
            {
                "description": "Rely exclusively on useState for all state management.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "190",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 4,
        "type": "multiple_choice",
        "question": "What is an effective way to handle side-effects in a React component with hooks?",
        "options": [
            {
                "description": "Encapsulate side-effects within the useEffect hook.",
                "isAnswerKey": true
            },
            {
                "description": "Handle side-effects within the render method.",
                "isAnswerKey": false
            },
            {
                "description": "Use useMemo to handle side-effects.",
                "isAnswerKey": false
            },
            {
                "description": "Avoid using hooks and manage side-effects with classes.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "191",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a React application, how can you ensure consistent styling across a large number of components?",
        "options": [
            {
                "description": "Use a CSS-in-JS library like styled-components or emotion.",
                "isAnswerKey": true
            },
            {
                "description": "Apply inline styles to each component.",
                "isAnswerKey": false
            },
            {
                "description": "Use global CSS classes for all components.",
                "isAnswerKey": false
            },
            {
                "description": "Rely on browser default styles.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "192",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is a systemic approach to managing tech debt in a large React codebase?",
        "options": [
            {
                "description": "Implement a regular refactoring schedule and enforce coding standards.",
                "isAnswerKey": true
            },
            {
                "description": "Ignore tech debt until it becomes a major issue.",
                "isAnswerKey": false
            },
            {
                "description": "Rely on automated tools only for tech debt management.",
                "isAnswerKey": false
            },
            {
                "description": "Assign a single developer to manage all tech debt.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "193",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is an effective way to enforce consistent architectural patterns in a React application?",
        "options": [
            {
                "description": "Define and document architectural guidelines and patterns.",
                "isAnswerKey": true
            },
            {
                "description": "Allow each developer to follow their own architectural style.",
                "isAnswerKey": false
            },
            {
                "description": "Use a single large component to manage all application logic.",
                "isAnswerKey": false
            },
            {
                "description": "Rely on third-party libraries for architectural decisions.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "194",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you optimize a React application for production deployment?",
        "options": [
            {
                "description": "Minify and bundle JavaScript files using a tool like Webpack.",
                "isAnswerKey": true
            },
            {
                "description": "Deploy the application without any build process.",
                "isAnswerKey": false
            },
            {
                "description": "Use inline JavaScript for all logic.",
                "isAnswerKey": false
            },
            {
                "description": "Avoid using any caching mechanisms.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "195",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a React application, what is a best practice for managing global state?",
        "options": [
            {
                "description": "Use a state management library like Redux or MobX.",
                "isAnswerKey": true
            },
            {
                "description": "Store all global state in a single component.",
                "isAnswerKey": false
            },
            {
                "description": "Pass global state down through props.",
                "isAnswerKey": false
            },
            {
                "description": "Avoid using global state altogether.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "196",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is a recommended approach to handle authentication in a React application?",
        "options": [
            {
                "description": "Use context and hooks to manage auth state and JWT tokens.",
                "isAnswerKey": true
            },
            {
                "description": "Store authentication tokens in plain text files.",
                "isAnswerKey": false
            },
            {
                "description": "Rely on client-side only authentication.",
                "isAnswerKey": false
            },
            {
                "description": "Store authentication data in the component's local state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "197",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a React application, how can you handle large data sets efficiently?",
        "options": [
            {
                "description": "Implement data fetching and pagination strategies.",
                "isAnswerKey": true
            },
            {
                "description": "Load all data at once and store it in state.",
                "isAnswerKey": false
            },
            {
                "description": "Render all data without any optimization.",
                "isAnswerKey": false
            },
            {
                "description": "Use setInterval to periodically fetch data.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "198",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "What is a best practice to handle asynchronous operations in a React component?",
        "options": [
            {
                "description": "Use async/await with try/catch blocks within useEffect.",
                "isAnswerKey": true
            },
            {
                "description": "Perform asynchronous operations directly in the render method.",
                "isAnswerKey": false
            },
            {
                "description": "Use synchronous code only.",
                "isAnswerKey": false
            },
            {
                "description": "Rely on global variables to handle async state.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "199",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "How can you ensure that your React components are easily testable and maintainable?",
        "options": [
            {
                "description": "Write components as pure functions and use prop-types for validation.",
                "isAnswerKey": true
            },
            {
                "description": "Use complex nested components to handle logic.",
                "isAnswerKey": false
            },
            {
                "description": "Avoid writing tests for React components.",
                "isAnswerKey": false
            },
            {
                "description": "Write components with inline styles and logic.",
                "isAnswerKey": false
            }
        ]
    },
    {
        "id": "200",
        "skill": "react",
        "category": "framework",
        "seniority": "senior",
        "level": 5,
        "type": "multiple_choice",
        "question": "In a React application, what is a strategy to ensure components are reusable across different projects?",
        "options": [
            {
                "description": "Create a component library with well-documented APIs and styles.",
                "isAnswerKey": true
            },
            {
                "description": "Hardcode project-specific logic into components.",
                "isAnswerKey": false
            },
            {
                "description": "Avoid using any third-party libraries.",
                "isAnswerKey": false
            },
            {
                "description": "Share components by copying and pasting code.",
                "isAnswerKey": false
            }
        ]
    }
]